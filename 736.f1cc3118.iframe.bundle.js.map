{"version":3,"file":"736.f1cc3118.iframe.bundle.js","mappings":";;;AAsIA;;;;;;AAgCA","sources":["webpack://@undermuz/react-page-builder/./node_modules/@undermuz/react-json-form/dist/themes/chakra/ui.mjs"],"sourcesContent":["// src/themes/chakra/ui.tsx\nimport { forwardRef, useMemo } from \"react\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n  Heading,\n  Stack,\n  Text\n} from \"@chakra-ui/react\";\nimport { EnumSchemeItemType } from \"../../types.mjs\";\nimport _styled from \"@emotion/styled\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar styled = _styled.default ?? _styled;\nvar UiContainer = ({ children }) => {\n  return /* @__PURE__ */ jsx(Flex, { direction: \"column\", children });\n};\nvar UiPrimaryBody = (props) => {\n  const { children } = props;\n  return /* @__PURE__ */ jsx(Flex, { direction: \"column\", p: 4, children });\n};\nvar UiDeepBody = (props) => {\n  const { children } = props;\n  return /* @__PURE__ */ jsx(Flex, { direction: \"column\", borderWidth: \"1px\", shadow: \"md\", p: 3, children });\n};\nvar UiSecondaryBody = (props) => {\n  const { children, level } = props;\n  if (level > 2) {\n    return /* @__PURE__ */ jsx(UiDeepBody, { ...props });\n  }\n  return /* @__PURE__ */ jsx(Flex, { direction: \"column\", p: 0, children });\n};\nvar UiBody = (props) => {\n  const { primary } = props;\n  if (primary)\n    return /* @__PURE__ */ jsx(UiPrimaryBody, { ...props });\n  return /* @__PURE__ */ jsx(UiSecondaryBody, { ...props });\n};\nvar UiHeader = (props) => {\n  const { title, level, primary, children } = props;\n  const pads = useMemo(() => {\n    if (primary) {\n      return 3;\n    }\n    if (level <= 2) {\n      return 0;\n    }\n    return 2;\n  }, [primary, level]);\n  return /* @__PURE__ */ jsxs(\n    Flex,\n    {\n      width: \"100%\",\n      direction: \"column\",\n      p: pads,\n      pb: 2,\n      justify: \"between\",\n      children: [\n        /* @__PURE__ */ jsx(Flex, { direction: \"row\", justify: \"space-between\", gap: \"small\", children: Boolean(title) && /* @__PURE__ */ jsx(\n          Heading,\n          {\n            as: primary ? `h3` : `h4`,\n            size: primary ? `lg` : `md`,\n            margin: \"none\",\n            children: title\n          }\n        ) }),\n        children\n      ]\n    }\n  );\n};\nvar UiFlatFormContainer = ({\n  children,\n  isShow\n}) => {\n  return /* @__PURE__ */ jsx(\n    Flex,\n    {\n      direction: \"column\",\n      style: { display: isShow ? void 0 : \"none\" },\n      children\n    }\n  );\n};\nvar UiField = (props) => {\n  const {\n    title,\n    description = null,\n    isLast,\n    // name,\n    type,\n    errors,\n    children\n  } = props;\n  const showLabel = useMemo(() => {\n    if (type === EnumSchemeItemType.Checkbox) {\n      return false;\n    }\n    if (type === EnumSchemeItemType.Widget) {\n      return false;\n    }\n    return true;\n  }, [type]);\n  const isError = errors?.length > 0;\n  return /* @__PURE__ */ jsx(Flex, { direction: \"row\", pb: !isLast ? 3 : void 0, children: /* @__PURE__ */ jsx(\n    Flex,\n    {\n      width: \"100%\",\n      pt: showLabel ? 0 : 2,\n      pb: showLabel ? 0 : 2,\n      direction: \"column\",\n      justify: \"center\",\n      children: /* @__PURE__ */ jsxs(FormControl, { isInvalid: isError, children: [\n        showLabel && /* @__PURE__ */ jsx(FormLabel, { children: title }),\n        children,\n        description !== null && !isError && /* @__PURE__ */ jsx(FormHelperText, { children: description }),\n        errors?.map((errorText, index) => {\n          if (typeof errorText !== \"string\") {\n            return null;\n          }\n          return /* @__PURE__ */ jsx(FormErrorMessage, { children: errorText }, index);\n        })\n      ] })\n    }\n  ) });\n};\nvar Tab = styled(Button)`\n    user-select: none;\n`;\nvar UiTab = forwardRef(\n  (props, ref) => {\n    return /* @__PURE__ */ jsxs(\n      Tab,\n      {\n        ...props,\n        variant: props.active ? void 0 : \"ghost\",\n        colorScheme: \"gray\",\n        onClick: props.onSelect,\n        ref,\n        children: [\n          Boolean(props.label) && /* @__PURE__ */ jsx(Fragment, { children: props.label }),\n          props.children\n        ]\n      }\n    );\n  }\n);\nUiTab.displayName = \"UiTab\";\nvar UiArrayFormContainer = (props) => {\n  return /* @__PURE__ */ jsx(Flex, { direction: \"column\", style: props.style, p: 3, children: props.children });\n};\nvar UiArrayFormHeader = (props) => {\n  return /* @__PURE__ */ jsx(Flex, { direction: \"row\", justify: \"space-between\", mb: 3, children: props.children });\n};\nvar TrashContainer = styled(Box)`\n    position: absolute;\n    z-index: 2;\n    top: -30px;\n    left: 0px;\n    width: 100%;\n`;\nvar UiArrayFormTrashContainer = forwardRef((props, ref) => {\n  return /* @__PURE__ */ jsxs(\n    TrashContainer,\n    {\n      ref,\n      animation: { type: \"fadeIn\", duration: 300 },\n      border: \"2px\",\n      borderColor: \"red.200\",\n      borderStyle: \"dashed\",\n      backgroundColor: props.isOver ? \"red.200\" : \"gray.100\",\n      p: 1,\n      children: [\n        Boolean(props?.label) && /* @__PURE__ */ jsx(Text, { children: props?.label }),\n        props.children\n      ]\n    }\n  );\n});\nUiArrayFormTrashContainer.displayName = \"UiArrayFormTrashContainer\";\nvar UiArrayFormTabs = (props) => {\n  return /* @__PURE__ */ jsx(Stack, { direction: \"row\", spacing: 2, align: \"center\", children: props.children });\n};\nvar UiArrayFormBody = (props) => {\n  return /* @__PURE__ */ jsx(Flex, { direction: \"column\", children: props.children });\n};\nvar ChakraUi = {\n  Container: UiContainer,\n  Header: UiHeader,\n  Body: UiBody,\n  FlatForm: UiFlatFormContainer,\n  Field: UiField,\n  ArrayForm: Object.assign(UiArrayFormContainer, {\n    Header: UiArrayFormHeader,\n    Tabs: UiArrayFormTabs,\n    Body: UiArrayFormBody,\n    TrashContainer: UiArrayFormTrashContainer\n  }),\n  Tab: UiTab\n};\nvar ui_default = ChakraUi;\nexport {\n  ui_default as default\n};\n"],"names":[],"sourceRoot":""}